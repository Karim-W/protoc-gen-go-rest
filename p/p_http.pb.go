// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http 0.1.0
// - protoc             v3.21.11
// source: p.proto

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	rest "github.com/karim-w/protoc-gen-go-rest/rest"
	stdlib "github.com/karim-w/stdlib"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL
var _ = http.NewServer

const _ = http.SupportPackageIsVersion1

var _ = new(rest.Controller)
var _ = new(stdlib.Client)
var _ = new(gin.Context)

type GreeterUseCases interface {
	MatchError(err error) (int, any)

	SayHelloRequest(ctx *gin.Context, req *HelloRequest) (int, *HelloReply, error)
}

type GreeterImpl struct {
	svc GreeterUseCases
}

func CreateGreeter() rest.Controller {
	return &GreeterImpl{}
}

func (ctrl *GreeterImpl) SetupRoutes(version int, rg *gin.RouterGroup) {

	rg.GET("/helloworld/{name}", ctrl.SayHelloHandler)
}

func (ctrl *GreeterImpl) SayHelloHandler(ctx *gin.Context) {
	var req HelloRequest
	if err := rest.BindReqQuery(ctx, &req); err != nil {
		ctx.JSON(400, gin.H{"error": err.Error()})
		return
	}
	if err := rest.BindReqVars(ctx, &req); err != nil {
		ctx.JSON(400, gin.H{"error": err.Error()})
		return
	}
	code, resp, err := ctrl.svc.SayHelloRequest(ctx, &req)
	if err != nil {
		ctx.JSON(ctrl.svc.MatchError(err))
		return
	}
	ctx.JSON(code, resp)
}

type GreeterHTTPClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts *stdlib.ClientOptions) (code int, rsp *HelloReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc      stdlib.Client
	baseURL string
}

func NewGreeterHTTPClient(client stdlib.Client, baseUrl string) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{
		cc:      client,
		baseURL: baseUrl,
	}
}

// GET /helloworld/{name}
// Requires path variables to be passed in opts.PathParams
func (c *GreeterHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts *stdlib.ClientOptions) (int, *HelloReply, error) {
	var out HelloReply
	code, err := c.cc.Invoke(ctx, "GET", c.baseURL+"/helloworld/{name}", opts, nil, &out)
	if err != nil {
		return code, nil, err
	}
	return code, &out, err
}
